mutate(percentage = count / sum(count) * 100)
# Plot the distribution using a stacked bar chart
ggplot(termination_gender, aes(x = termreason_desc, y = percentage, fill = gender_short)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Termination Reason", y = "Percentage", fill = "Gender") +
ggtitle("Distribution of Termination Reasons by Gender") +
theme_minimal()
#Analysis 3.5: Explore the impact of department and gender on turnover
# Calculate the percentage of terminated or resigned employees for each combination of department and gender
turnover_data <- cleaned_dataset %>%
group_by(department_name, gender_short) %>%
summarise(turnover_percentage = sum(termreason_desc != "Not Applicable") / n() * 100)
# Visualize the results using a stacked bar chart
ggplot(turnover_data, aes(x = department_name, y = turnover_percentage, fill = gender_short)) +
geom_bar(stat = "identity") +
labs(x = "Department", y = "Turnover Percentage", fill = "Gender") +
ggtitle("Turnover by Department and Gender") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Analysis 3.8: Analyze the distribution of termination reasons among different gender groups
# Filter out the "Not Applicable" category
cleaned_dataset_filtered <- cleaned_dataset %>%
filter(termreason_desc != "Not Applicable")
# Group the data by termreason_desc and gender_short
termination_gender <- cleaned_dataset_filtered %>%
group_by(termreason_desc, gender_short) %>%
summarise(count = n())
# Calculate the percentage of employees for each combination
termination_gender <- termination_gender %>%
group_by(termreason_desc) %>%
mutate(percentage = count / sum(count) * 100)
# Plot the distribution using a stacked bar chart
ggplot(termination_gender, aes(x = termreason_desc, y = percentage, fill = gender_short)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Termination Reason", y = "Percentage", fill = "Gender") +
ggtitle("Distribution of Termination Reasons by Gender") +
theme_minimal()
#Analysis 3.5: Explore the impact of department and gender on turnover
# Calculate the percentage of terminated or resigned employees for each combination of department and gender
turnover_data <- cleaned_dataset %>%
group_by(department_name, gender_short) %>%
summarise(turnover_percentage = sum(termreason_desc != "Not Applicable") / n() * 100)
# Visualize the results using a stacked bar chart
ggplot(turnover_data, aes(x = department_name, y = turnover_percentage, fill = gender_short)) +
geom_bar(stat = "identity") +
labs(x = "Department", y = "Turnover Percentage", fill = "Gender") +
ggtitle("Turnover by Department and Gender") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Analysis 3.6: Calculate the average length of service for employees who have resigned or been terminated compared to those who are still active in the company.
# Calculate the average length of service for resigned, terminated, and active employees (excluding "Not Applicable" category)
avg_length_of_service <- cleaned_dataset %>%
filter(termreason_desc != "Not Applicable") %>%
group_by(termreason_desc) %>%
summarise(Average_Length_of_Service = mean(length_of_service))
# Create a bar plot
ggplot(avg_length_of_service, aes(x = termreason_desc, y = Average_Length_of_Service)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Employment Status", y = "Average Length of Service") +
ggtitle("Average Length of Service by Employment Status") +
theme_bw()
#Analysis 3.7: Determine if there are any significant differences in the length of service between employees who were terminated for different reasons
# Filter out terminated employees
terminated_employees <- cleaned_dataset %>% filter(termtype_desc == "Voluntary" | termtype_desc == "Involuntary")
# Create a box plot
ggplot(terminated_employees, aes(x = termreason_desc, y = length_of_service)) +
geom_boxplot() +
xlab("Termination Reason") +
ylab("Length of Service") +
ggtitle("Distribution of Length of Service by Termination Reason")
#Analysis 3.8: Analyze the distribution of termination reasons among different gender groups
# Filter out the "Not Applicable" category
cleaned_dataset_filtered <- cleaned_dataset %>%
filter(termreason_desc != "Not Applicable")
# Group the data by termreason_desc and gender_short
termination_gender <- cleaned_dataset_filtered %>%
group_by(termreason_desc, gender_short) %>%
summarise(count = n())
# Calculate the percentage of employees for each combination
termination_gender <- termination_gender %>%
group_by(termreason_desc) %>%
mutate(percentage = count / sum(count) * 100)
# Plot the distribution using a stacked bar chart
ggplot(termination_gender, aes(x = termreason_desc, y = percentage, fill = gender_short)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Termination Reason", y = "Percentage", fill = "Gender") +
ggtitle("Distribution of Termination Reasons by Gender") +
theme_minimal()
#Analysis 3.9: Analyze the relationship between termination reasons and department
# Filter out rows with "Not Applicable" termination reason
filtered_dataset <- cleaned_dataset %>%
filter(termreason_desc != "Not Applicable")
# Group the data by termreason_desc and department_name, and calculate the count
termination_department <- filtered_dataset %>%
group_by(termreason_desc, department_name) %>%
summarise(count = n())
# Plot a stacked bar chart
ggplot(termination_department, aes(x = department_name, y = count, fill = termreason_desc)) +
geom_bar(stat = "identity", position = "stack") +
xlab("Department") +
ylab("Count") +
ggtitle("Termination Reasons by Department (Excluding Not Applicable)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Analysis 3.10: Determine if certain termination reasons are more prevalent in specific store locations
# Filter out "Not Applicable" termination reasons
filtered_data <- cleaned_dataset %>%
filter(termreason_desc != "Not Applicable")
# Group the data by termreason_desc and store_name
grouped_data <- filtered_data %>%
group_by(termreason_desc, store_name) %>%
summarise(count = n())
# Create a stacked bar chart to visualize the relationship between termination reasons and store locations
ggplot(grouped_data, aes(x = store_name, y = count, fill = termreason_desc)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), position = position_stack(vjust = 0.5), color = "black", size = 3) +
xlab("Store Location") +
ylab("Count") +
ggtitle("Termination Reasons by Store Location") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_brewer(palette = "Set1")
#Analysis 3.11: Analyze the distribution of termination reasons across different age groups
# Group the data by age group and termination reason, and calculate the count
termination_age <- cleaned_dataset %>%
filter(termreason_desc != "Not Applicable") %>%
mutate(age_group = cut(age, breaks = c(0, 20, 30, 40, 50, Inf), labels = c("Under 20", "20-30", "30-40", "40-50", "Over 50"))) %>%
group_by(termreason_desc, age_group) %>%
summarise(count = n())
# Calculate the percentage of employees for each termination reason and age group
termination_age_pct <- termination_age %>%
group_by(age_group) %>%
mutate(pct = count / sum(count) * 100)
# Plot a stacked bar chart with percentages
ggplot(termination_age_pct, aes(x = age_group, y = pct, fill = termreason_desc)) +
geom_col(position = "stack") +
geom_text(aes(label = paste0(round(pct), "%")), position = position_stack(vjust = 0.5)) +
xlab("Age Group") +
ylab("Percentage") +
ggtitle("Termination Reasons by Age Group")
#Question 4: How does employee turnover vary across different store locations?
#Analysis 4.1: Calculate the total number of employees who have resigned or been terminated in each store location.
# Filter the dataset for employees who have resigned or been terminated
resigned_terminated <- cleaned_dataset %>%
filter(STATUS %in% c("RESIGNED", "TERMINATED"))
# Group the data by store location and calculate the total number of employees
store_turnover <- resigned_terminated %>%
group_by(store_name) %>%
summarise(total_employees = n())
# Sort the store names in descending order of total employees
store_turnover <- store_turnover[order(store_turnover$total_employees, decreasing = TRUE), ]
# Create a bar chart to visualize the total number of employees who have resigned or been terminated in each store location
ggplot(store_turnover, aes(x = reorder(store_name, -total_employees), y = total_employees)) +
geom_bar(stat = "identity") +
labs(x = "Store Name", y = "Total Employees", title = "Total Number of Resigned/Terminated Employees by Store Location") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Analysis 4.2: Analyze the gender distribution among employees in each store location.
# Create a new variable to represent the sequential numbering of store locations
gender_distribution$store_number <- seq_along(gender_distribution$store_name)
# Plot a bar chart with sequential numbering on the x-axis
gender_chart <- ggplot(gender_distribution, aes(x = store_number, y = count, fill = gender_full)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Gender Distribution among Employees in Each Store Location", x = "Store Location", y = "Count", fill = "Gender") +
scale_x_continuous(breaks = gender_distribution$store_number, labels = gender_distribution$store_name) +
theme_minimal() +
theme(legend.position = "top", axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Print the modified gender chart
print(gender_chart)
#Analysis 4.3: Compare the employee turnover rates between male and female employees in each store location.
# Filter the dataset for employees who have resigned or been terminated
resigned_terminated <- cleaned_dataset %>%
filter(STATUS %in% c("RESIGNED", "TERMINATED"))
# Group the data by store location and gender, and calculate the turnover rates
turnover_rates <- resigned_terminated %>%
group_by(store_name, gender_full) %>%
summarise(turnover_rate = n() / total_employees * 100)
# Sort the data by store location and gender
turnover_rates <- turnover_rates %>%
arrange(store_name, gender_full)
# Create a new variable to represent the sequential numbering of store locations
turnover_rates$store_number <- seq_along(turnover_rates$store_name)
# Plot a grouped bar chart with sequential numbering on the x-axis
turnover_chart <- ggplot(turnover_rates, aes(x = store_number, y = turnover_rate, fill = gender_full)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Employee Turnover Rates by Gender in Each Store Location",
x = "Store Location", y = "Turnover Rate", fill = "Gender") +
scale_x_continuous(breaks = turnover_rates$store_number, labels = turnover_rates$store_name) +
theme_minimal() +
theme(legend.position = "top", axis.text.x = element_text(angle = 45, hjust = 1))
# Print the modified turnover chart
print(turnover_chart)
#Analysis 4.4: Determine if there is a correlation between store location and length of service.
# Group the data by store location and calculate the average length of service
avg_length_of_service <- cleaned_dataset %>%
group_by(store_name) %>%
summarise(avg_service_length = mean(length_of_service))
# View the average length of service by store location
avg_length_of_service
# Create a box plot to visualize the distribution of length of service by store location
box_plot <- ggplot(cleaned_dataset, aes(x = factor(store_name), y = length_of_service)) +
geom_boxplot() +
labs(title = "Distribution of Length of Service by Store Location", x = "Store Location", y = "Length of Service") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the box plot
print(box_plot)
#Analysis 4.5: Identify the store location(s) with the highest and lowest average age of employees.
# Calculate the average age for each store location
# Calculate the average age of employees by store location
average_age <- cleaned_dataset %>%
group_by(store_name) %>%
summarize(avg_age = mean(age))
# Convert store_name to a factor with sequential levels
average_age$store_name <- factor(average_age$store_name, levels = unique(average_age$store_name))
# Create a bar graph with sequential x-axis
bar_graph <- ggplot(average_age, aes(x = store_name, y = avg_age)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Average Age of Employees by Store Location", x = "Store Location", y = "Average Age") +
scale_x_discrete(labels = function(x) as.numeric(x)) +  # Convert x-axis labels to numeric
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the updated bar graph
print(bar_graph)
#Analysis 4.6: Analyze the relationship between department and employee turnover rates within each store location.
# Filter the dataset to exclude "Not Applicable" termination reasons
filtered_dataset <- cleaned_dataset %>%
filter(termreason_desc != "Not Applicable")
# Calculate the turnover rates by store location and department
turnover_rates <- filtered_dataset %>%
group_by(store_name, department_name) %>%
summarise(turnover_rate = sum(termreason_desc == "Resignation" | termreason_desc == "Termination") / n())
# Create a stacked bar chart to visualize the turnover rates by department within each store location
turnover_chart <- ggplot(turnover_rates, aes(x = store_name, y = turnover_rate, fill = department_name)) +
geom_bar(stat = "identity") +
labs(title = "Employee Turnover Rates by Department within Each Store Location",
x = "Store Location", y = "Turnover Rate", fill = "Department") +
theme_minimal() +
theme(legend.position = "top", axis.text.x = element_text(angle = 45, hjust = 1))
# Print the turnover chart
print(turnover_chart)
#Analysis 4.7: Calculate the average number of years of service for employees who have resigned or been terminated in each store location.
# Add a new column 'store_index' to assign a unique index to each store location
average_years_of_service$store_index <- 1:nrow(average_years_of_service)
# Create a bar chart with store index on the x-axis
service_years_chart <- ggplot(average_years_of_service, aes(x = store_index, y = average_service_years)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Average Years of Service for Resigned or Terminated Employees in Each Store Location",
x = "Store Location", y = "Average Years of Service") +
scale_x_continuous(breaks = average_years_of_service$store_index, labels = average_years_of_service$store_name) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the service years chart
print(service_years_chart)
#Analysis 4.8: Investigate the reasons for employee turnover in each store location.
# Create a new variable to represent the sequential numbering of store locations
turnover_reasons$store_number <- seq_along(turnover_reasons$store_name)
# Create a stacked bar chart with sequential numbering on the x-axis
turnover_reasons_chart <- ggplot(turnover_reasons, aes(x = store_number, y = count, fill = termreason_desc)) +
geom_bar(stat = "identity") +
labs(title = "Reasons for Employee Turnover by Store Location",
x = "Store Location", y = "Count", fill = "Termination Reason") +
scale_x_continuous(breaks = turnover_reasons$store_number, labels = turnover_reasons$store_name) +
theme_minimal() +
theme(legend.position = "top", axis.text.x = element_text(angle = 45, hjust = 1))
# Print the modified turnover reasons chart
print(turnover_reasons_chart)
#Analysis 4.9: Calculate the average duration of employment for employees in various cities
# Calculate the average length of service by city
average_service <- cleaned_dataset %>%
group_by(city_name) %>%
summarise(average_length_of_service = mean(length_of_service))
# Create a line chart to visualize the average length of service by city
service_chart <- ggplot(average_service, aes(x = city_name, y = average_length_of_service)) +
geom_line() +
geom_point() +
labs(x = "City", y = "Average Length of Service", title = "Average Length of Service for Employees in Each City") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Print the service chart
print(service_chart)
#Analysis 4.10: Examine whether there are differences in the length of service across different generations
# Define the age ranges for each generation
millennials <- c(18, 35)
gen_x <- c(36, 55)
baby_boomers <- c(56, 75)
silent_generation <- c(76, max(cleaned_dataset$age))
# Create a function to categorize the age into generations
get_generation <- function(age) {
case_when(
age %in% millennials ~ "Millennials",
age %in% gen_x ~ "Generation X",
age %in% baby_boomers ~ "Baby Boomers",
age %in% silent_generation ~ "Silent Generation",
TRUE ~ "Unknown"
)
}
# Add a new column for the generation based on the age
cleaned_dataset <- cleaned_dataset %>%
mutate(generation = get_generation(age))
# Calculate the average length of service for each generation, excluding unknowns
generation_service <- cleaned_dataset %>%
filter(generation != "Unknown") %>%
group_by(generation) %>%
summarise(average_length_of_service = mean(length_of_service))
# Create a bar chart to visualize the average length of service by generation
service_chart <- ggplot(generation_service, aes(x = generation, y = average_length_of_service, fill = generation)) +
geom_bar(stat = "identity") +
labs(x = "Generation", y = "Average Length of Service", title = "Generational Differences in Length of Service") +
theme_minimal() +
theme(legend.position = "none")
# Print the service chart
print(service_chart)
#Question 5: Is there a relationship between the number of employees who have retired
#and the number of employees who have been laid off?
#Analysis 5.1: Calculate the total number of employees who retired.
# Calculate the total number of retired employees
total_retired_employees <- nrow(retired_employees)
# Create a data frame with the counts of retired employees
retired_counts <- data.frame(Retired = total_retired_employees)
# Create a bar chart to visualize the total number of retired employees
retired_chart <- ggplot(retired_counts, aes(x = "", y = Retired, fill = Retired)) +
geom_bar(stat = "identity", width = 1) +
labs(x = "", y = "Total Number of Retired Employees", title = "Retired Employees") +
geom_text(aes(label = Retired), vjust = -0.5, color = "black") + # Add data labels
theme_minimal() +
theme(legend.position = "none")
# Print the retired chart
print(retired_chart)
#Analysis 5.2: Determine the total number of employees who were laid off.
laid_off_employees <- filter(cleaned_dataset, termreason_desc == "Layoff")
total_laid_off_employees <- nrow(laid_off_employees)
# Create a data frame with the count of laid off employees
laid_off_counts <- data.frame(Laid_Off = total_laid_off_employees)
# Create a bar chart to visualize the total number of laid off employees
laid_off_chart <- ggplot(laid_off_counts, aes(x = "", y = Laid_Off, fill = Laid_Off)) +
geom_bar(stat = "identity", width = 1) +
labs(x = "", y = "Total Number of Laid Off Employees", title = "Laid Off Employees") +
theme_minimal() +
theme(legend.position = "none") +
geom_text(aes(label = Laid_Off), color = "black", vjust = -0.5)
# Print the laid off chart
print(laid_off_chart)
#Analysis 5.3: Calculate the percentage of retired employees relative to the total number of employees.
# Calculate the total number of employees
total_employees <- nrow(cleaned_dataset)
# Calculate the percentage of retired employees
retired_percentage <- (total_retired_employees / total_employees) * 100
# Create a data frame with the percentages
retired_percentages <- data.frame(Category = c("Retired", "Other"), Percentage = c(retired_percentage, 100 - retired_percentage))
# Create a pie chart to visualize the percentage of retired employees
retired_pie <- ggplot(retired_percentages, aes(x = "", y = Percentage, fill = Category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
labs(x = "", y = "", title = "Percentage of Retired Employees") +
theme_void() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Category")) +
geom_text(aes(label = paste0(round(Percentage), "%")), position = position_stack(vjust = 0.5))
# Print the retired pie chart
print(retired_pie)
#Analysis 5.4: Compare the number of retired employees to the number of employees who resigned or were terminated for other reasons.
# Calculate the total number of retired employees
total_retired_employees <- nrow(filter(cleaned_dataset, termreason_desc == "Retirement"))
# Calculate the total number of employees who resigned or were terminated for other reasons
total_other_employees <- nrow(filter(cleaned_dataset, termreason_desc != "Retirement"))
# Create a data frame with the counts
employee_counts <- data.frame(Category = c("Retired", "Other"), Count = c(total_retired_employees, total_other_employees))
# Create a bar chart to compare the number of retired employees and other employees
employee_comparison_chart <- ggplot(employee_counts, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity", width = 0.5, color = "black") +
labs(x = "Employee Category", y = "Count", title = "Comparison of Retired Employees and Other Employees") +
theme_minimal() +
theme(legend.position = "none") +
geom_text(aes(label = Count), vjust = -0.5)
# Print the employee comparison chart
print(employee_comparison_chart)
#Analysis 5.5: Create a pie chart to visualize the distribution of termination types.
# Exclude "Not Applicable" termination type from the dataset
cleaned_dataset_filtered <- cleaned_dataset[cleaned_dataset$termreason_desc != "Not Applicable", ]
# Calculate the counts for each termination type
termination_counts <- table(cleaned_dataset_filtered$termreason_desc)
# Calculate the percentages for each termination type
termination_percentages <- round(termination_counts / sum(termination_counts) * 100, 2)
# Create a pie chart
colors <- rainbow(length(termination_counts))
pie(termination_counts, main = "Distribution of Termination Types", col = colors)
# Add labels with counts and percentages
labels <- paste(names(termination_counts), "\n", termination_counts, " (", termination_percentages, "%)", sep = "")
legend("topright", legend = labels, cex = 0.8, fill = colors)
#Analysis 5.6: Analyze the gender distribution among retired employees.
retired_employees <- cleaned_dataset[cleaned_dataset$termreason_desc == "Retirement", ]
gender_counts <- table(retired_employees$gender_full)
gender_percentages <- round(prop.table(gender_counts) * 100, 2)
# Pie Chart
colors <- rainbow(length(gender_counts))
pie(gender_counts, main = "Gender Distribution among Retired Employees", col = colors)
legend("topright", legend = paste(names(gender_counts), "\n", gender_counts, " (", gender_percentages, "%)", sep = ""), cex = 0.8, fill = colors)
#Analysis 5.7: Determine the average age of retired employees compared to those who were laid off.
#Filter the dataset for retired employees and laid off employees separately
retired_employees <- cleaned_dataset[cleaned_dataset$termreason_desc == "Retirement", ]
laid_off_employees <- cleaned_dataset[cleaned_dataset$termreason_desc == "Layoff", ]
#Calculate the average age for retired employees and laid off employees
avg_age_retired <- mean(retired_employees$age)
avg_age_laid_off <- mean(laid_off_employees$age)
#Create a bar chart to visualize the average age comparison
# Create a data frame for the average age values
age_data <- data.frame(Category = c("Retired Employees", "Laid Off Employees"),
Average_Age = c(avg_age_retired, avg_age_laid_off))
#Analysis 5.7: Determine the average age of retired employees compared to those who were laid off.
#Filter the dataset for retired employees and laid off employees separately
retired_employees <- cleaned_dataset[cleaned_dataset$termreason_desc == "Retirement", ]
laid_off_employees <- cleaned_dataset[cleaned_dataset$termreason_desc == "Layoff", ]
#Calculate the average age for retired employees and laid off employees
avg_age_retired <- mean(retired_employees$age)
avg_age_laid_off <- mean(laid_off_employees$age)
#Create a bar chart to visualize the average age comparison
# Create a data frame for the average age values
age_data <- data.frame(Category = c("Retired Employees", "Laid Off Employees"),
Average_Age = c(avg_age_retired, avg_age_laid_off))
# Create the bar chart with age labels
bar_chart <- ggplot(age_data, aes(x = Category, y = Average_Age, fill = Category)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label = round(Average_Age), y = Average_Age), color = "black", vjust = -0.5) +
labs(x = "", y = "Average Age", title = "Average Age of Retired and Laid Off Employees") +
theme_minimal() +
theme(legend.position = "none")
# Print the bar chart
print(bar_chart)
#Analysis 5.8: Identify any significant differences in the length of service between retired employees and those who were laid off.
# Create a data frame for retired and laid off employees' length of service
data <- data.frame(
Group = c(rep("Retired", nrow(retired_employees)), rep("Laid Off", nrow(laid_off_employees))),
LengthOfService = c(retired_employees$length_of_service, laid_off_employees$length_of_service)
)
# Create a violin plot
violin_plot <- ggplot(data, aes(x = Group, y = LengthOfService, fill = Group)) +
geom_violin(scale = "width", trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white", color = "black", outlier.shape = NA) +
labs(x = "Termination Type", y = "Length of Service", title = "Comparison of Length of Service") +
theme_minimal()
# Print the violin plot
print(violin_plot)
#Analysis 5.9: Identify any changes or trends in the number of retirements and layoffs over time.
# Group the dataset by year and termination reason and count the occurrences
termination_counts <- cleaned_dataset %>%
filter(termreason_desc %in% c("Retirement", "Layoff")) %>%
group_by(STATUS_YEAR, termreason_desc) %>%
summarise(count = n())
# Create a line plot to show the changes over time
line_plot <- ggplot(termination_counts, aes(x = STATUS_YEAR, y = count, color = termreason_desc)) +
geom_line() +
labs(x = "Year", y = "Count", title = "Number of Retirements and Layoffs Over Time") +
scale_color_manual(values = c("Retirement" = "blue", "Layoff" = "red")) +
theme_minimal()
# Print the line plot
print(line_plot)
#Analysis 5.10: Determine the city or cities with the highest retirement rates.
# Calculate the retirement rates by city
retirement_rates <- cleaned_dataset %>%
group_by(city_name) %>%
summarise(retirements = sum(termreason_desc == "Retirement"),
total_employees = n(),
retirement_rate = (retirements / total_employees) * 100) %>%
arrange(desc(retirement_rate))
# Filter out cities with no retirements
retirement_rates <- retirement_rates %>% filter(retirements > 0)
# Plot the retirement rates
retirement_chart <- ggplot(retirement_rates, aes(x = reorder(city_name, -retirement_rate), y = retirement_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "City", y = "Retirement Rate (%)", title = "Retirement Rates by City") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = ifelse(rank(-retirement_rate) <= 2, sprintf("%.1f%%", retirement_rate), "")),
vjust = -0.5, color = "black", size = 4)
# Print the retirement chart
print(retirement_chart)
#Analysis 5.11: Compare the gender distribution among retired employees and employees who were laid off
#using a stacked bar chart or a grouped bar chart to identify any gender-related patterns or discrepancies.
# Group the data by gender and termreason_desc and count the occurrences
gender_data <- cleaned_dataset %>%
filter(termreason_desc %in% c("Retirement", "Layoff")) %>%
group_by(gender_full, termreason_desc) %>%
summarise(count = n())
# Create the grouped bar chart
bar_chart <- ggplot(gender_data, aes(x = termreason_desc, y = count, fill = gender_full)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = count), vjust = -0.5, color = "black", size = 3.5) +  # Add data labels
labs(x = "Termination Reason", y = "Count", title = "Gender Distribution: Retired vs. Laid Off") +
scale_fill_manual(values = c("Male" = "blue", "Female" = "pink")) +
theme_minimal()
# Print the bar chart
print(bar_chart)
#Analysis 5.12: Average Tenure of Retired Employees vs Laid-Off Employees
# Calculate the average tenure and standard deviation for retired employees
retired_avg <- mean(cleaned_dataset$length_of_service[cleaned_dataset$termreason_desc == "Retirement"], na.rm = TRUE)
retired_sd <- sd(cleaned_dataset$length_of_service[cleaned_dataset$termreason_desc == "Retirement"], na.rm = TRUE)
# Calculate the average tenure and standard deviation for laid-off employees
laid_off_avg <- mean(cleaned_dataset$length_of_service[cleaned_dataset$termreason_desc == "Layoff"], na.rm = TRUE)
laid_off_sd <- sd(cleaned_dataset$length_of_service[cleaned_dataset$termreason_desc == "Layoff"], na.rm = TRUE)
# Create a data frame with the average tenure and standard deviation
tenure_data <- data.frame(
Group = c("Retired", "Laid-Off"),
Average_Tenure = c(retired_avg, laid_off_avg),
Standard_Deviation = c(retired_sd, laid_off_sd)
)
# Create the bar chart with error bars and labels
bar_chart <- ggplot(tenure_data, aes(x = Group, y = Average_Tenure, fill = Group)) +
geom_bar(stat = "identity", width = 0.6) +
geom_errorbar(aes(ymin = Average_Tenure - Standard_Deviation, ymax = Average_Tenure + Standard_Deviation), width = 0.2) +
geom_text(aes(label = round(Average_Tenure, 2)), vjust = -0.5, color = "black", size = 4) +
labs(x = "Group", y = "Average Tenure (years)", title = "Average Tenure of Retired Employees vs Laid-Off Employees") +
theme_minimal()
# Print the bar chart
print(bar_chart)
